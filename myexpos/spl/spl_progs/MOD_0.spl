alias funcnm R1;
alias PID R2;
alias retn R0;
alias T_stat R3;
T_stat=TERMINAL_STATUS_TABLE;

if(funcnm==1) then
alias r2 R2;
alias r3 R3;
while([BUFFER_TABLE+r2*4+2]!=-1) do
[PROCESS_TABLE+r3*16+4]=WAIT_BUFFER;
[PROCESS_TABLE+r3*16+5]=r2;
multipush(R0,R1,R2,R3);
call MOD_5;
multipop(R0,R1,R2,R3);
endwhile;
[BUFFER_TABLE+r2*4+2]=[SYSTEM_STATUS_TABLE+1];
return;
endif;
if(funcnm==2) then
alias r2 R2;
alias r3 R3;

r3=[SYSTEM_STATUS_TABLE+1];
if([BUFFER_TABLE+r2*4+2]!=r3) then
retn=-1;
return;
endif;
[BUFFER_TABLE+r2*4+2]=-1;
alias cnt R6;
cnt=0;
while(cnt<16) do
if([PROCESS_TABLE+cnt*16+4]==WAIT_BUFFER&&[PROCESS_TABLE+cnt*16+5]==r2) then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
cnt=cnt+1;
endwhile;
retn=0;
return;
endif;



if(funcnm==4) then

alias Pid R3;
alias idx R2;
Pid=[SYSTEM_STATUS_TABLE+1];

while([FILE_STATUS_TABLE+idx*4]!=-1) do
[PROCESS_TABLE+Pid*16+4]=WAIT_FILE;
[PROCESS_TABLE+Pid*16+5]=idx;
multipush(R1,R2,R3);
call MOD_5;
multipop(R1,R2,R3);
endwhile;
if([INODE_TABLE+idx*16]==-1) then
retn=-1;
return;
endif;
[FILE_STATUS_TABLE+idx*4]=Pid;
retn=0;
return;
endif;

if(funcnm==5) then
breakpoint;
alias Pid R3;
alias idx R2;
Pid=[SYSTEM_STATUS_TABLE+1];
if([FILE_STATUS_TABLE+idx*4]!=Pid) then
retn=-1;
return;
endif;
[FILE_STATUS_TABLE+idx*4]=-1;
alias cnt R8;
cnt=0;
while(cnt<16) do
if([PROCESS_TABLE+cnt*16+4]==WAIT_FILE&&[PROCESS_TABLE+cnt*16+5]==idx) then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
cnt=cnt+1;
endwhile;
breakpoint;
retn=0;
return;
endif;




if(funcnm==6) then
alias cnt R7;
cnt=0;
while(cnt<32) do 
if([SEMAPHORE_TABLE+cnt*4+1]==0) then 
[SEMAPHORE_TABLE+cnt*4+1]=1;
retn=cnt;
return;
endif;
cnt=cnt+1;
endwhile; 
retn=-1;
return;
endif;

if(funcnm==7) then
alias idx R2;
alias pid R3;
alias cnt R8;
cnt=0;
if([SEMAPHORE_TABLE+4*idx]==pid) then
[SEMAPHORE_TABLE+4*idx]=-1;
while(cnt<16) do
if([PROCESS_TABLE+cnt*16+4]==WAIT_SEMAPHORE&&[PROCESS_TABLE+cnt*16+5]==idx) then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
cnt=cnt+1;
endwhile;
endif;
[SEMAPHORE_TABLE+4*idx+1]=[SEMAPHORE_TABLE+4*idx+1]-1;
retn=0;
return;
endif;


if(funcnm==8) then
while([T_stat]!=0) do
[PROCESS_TABLE+PID*16+4]=WAIT_TERMINAL;
multipush(R0,R1,R2,R3);

call MOD_5;
multipop(R0,R1,R2,R3);
endwhile;
[T_stat]=1;
[T_stat+1]=PID;
return;
endif;

if(funcnm==9) then
if([T_stat+1]!=PID) then
retn=-1;
return;
else
[T_stat]=0;
[T_stat+1]=-1;
alias cnt R8;
cnt=1;
while(cnt<16) do
if([PROCESS_TABLE+cnt*16+4]==WAIT_TERMINAL) then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
cnt=cnt+1;
endwhile;
retn=0;
return;
endif;
endif;

if(funcnm==3) then 
while([DISK_STATUS_TABLE]==1) do 
[PROCESS_TABLE+PID*16+4]=WAIT_DISK;
multipush(R1,R2,R3);
call MOD_5;
multipop(R1,R2,R3);
endwhile;
[DISK_STATUS_TABLE]=1;
[DISK_STATUS_TABLE+4]=PID;
return;
endif;
