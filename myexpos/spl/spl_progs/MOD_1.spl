alias funcnum R1;
alias PID R2;
alias retn R0;
alias cnt R6;
alias r3 R3;
if(funcnum==5) then
cnt=0;
while(cnt<60) do
if([INODE_TABLE+cnt*16+1]!=-1) then
funcnum=4;
multipush(R1,R2,R3,R4,R5,R6,R7,R8);
PID=cnt;
r3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
endif;
cnt=cnt+1;
endwhile;
cnt=2;
while(cnt<16) do
if([SYSTEM_STATUS_TABLE+1]!=cnt&&[PROCESS_TABLE+cnt*16+4]!="TERMINATED") then
funcnum=3;
PID=cnt;
multipush(R1,R2,R3,R4,R5,R6,R7,R8);
call MOD_1;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
endif;
cnt=cnt+1;
endwhile;

cnt=0;
while(cnt<60) do
if([INODE_TABLE+cnt*16+1]!=-1) then
funcnum=5;
multipush(R1,R2,R3,R4,R5,R6,R7,R8);
PID=cnt;
r3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
endif;
cnt=cnt+1;
endwhile;
return;
endif;







if(funcnum==1) then 
cnt=1;
while(cnt<16) do 
if([PROCESS_TABLE+cnt*16+4]=="TERMINATED") then
retn=cnt;
[PROCESS_TABLE+cnt*16+4]=ALLOCATED;
return;
endif;
cnt=cnt+1;
endwhile;
retn=-1;
return;
endif;




if(funcnum==2) then
alias pgno R2;
pgno=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];
cnt=0;
while(cnt<8) do
if([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+cnt*2]==1) then
funcnum=7;
pgno=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+cnt*2+1];
multipush(R1,R2,R6);
call MOD_0;
multipop(R1,R2,R6);
else
funcnum=4;
pgno=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+cnt*2+1];
multipush(R1,R2,R6);
call MOD_0;
multipop(R1,R2,R6);
endif;
[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+cnt*2]=-1;
[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+cnt*2+1]=-1;
cnt=cnt+1;
endwhile;
funcnum=2;
multipush(R2,R6);
call MOD_2;
multipop(R2,R6);
return;
endif;

if(funcnum==3) then 
funcnum=4;
multipush(R1,R2,R6);
call MOD_1;
multipop(R1,R2,R6);
funcnum=2;
multipush(R1,R2,R6);
call MOD_1;
multipop(R1,R2,R6);
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]="TERMINATED";
if([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]!=9) then
cnt=1;
while(cnt<16) do
if([PROCESS_TABLE+cnt*16+4]==WAIT_PROCESS&&[PROCESS_TABLE+cnt*16+5]==[SYSTEM_STATUS_TABLE+1]) then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
if([PROCESS_TABLE+cnt*16+2]==[SYSTEM_STATUS_TABLE+1]) then
[PROCESS_TABLE+cnt*16+2]=-1;
endif;
cnt=cnt+1;
endwhile;
endif;

return;

endif;
if(funcnum==4) then
cnt=2;
while(cnt<10) do
if(cnt!=4&&cnt!=5&&cnt!=6&&cnt!=7) then
if([DISK_MAP_TABLE+PID*10+cnt]!=-1) then
alias Pid R3;
Pid=PID;
alias blk R2;
blk=[DISK_MAP_TABLE+Pid*10+cnt];
multipush(R1,R2,R3,R6,R10);
funcnum=4;
call MOD_2;
multipop(R1,R2,R3,R6,R10);
endif;
endif;
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+cnt]=-1;
cnt=cnt+1;
endwhile;


[PTBR+0]=-1;
[PTBR+1]="0000";
[PTBR+2]=-1;
[PTBR+3]="0000";

cnt=4;
breakpoint;
while(cnt<19) do
if([PTBR+cnt]!=-1) then
funcnum=2;
alias pgno R2;
pgno=[PTBR+cnt];
multipush(R1,R2,R6,R10);
call MOD_2;
multipop(R1,R2,R6,R10);
[PTBR+cnt]=-1;
cnt=cnt+1;
[PTBR+cnt]="0000";
cnt=cnt+1;
else
cnt=cnt+2;
endif;
endwhile;
return;
endif;

