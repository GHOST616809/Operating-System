alias funcnum R1;
alias retn R0;
if(funcnum==1) then
[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
breakpoint;
while([SYSTEM_STATUS_TABLE+2]==0) do 
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE]*16+4]="WAIT_MEM";
multipush(R1);
call MOD_5;
multipop(R1);
endwhile;
breakpoint;
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;

alias cnt R5;
cnt=76;
breakpoint;
while(cnt<128) do 
if([MEMORY_FREE_LIST+cnt]==0) then
retn=cnt;
[MEMORY_FREE_LIST+cnt]=[MEMORY_FREE_LIST+cnt]+1;
break;
endif;
cnt=cnt+1;
endwhile;
breakpoint;
return;
endif;

if(funcnum==2) then
alias pgno R2;
[MEMORY_FREE_LIST+pgno]=[MEMORY_FREE_LIST+pgno]-1;
if([MEMORY_FREE_LIST+pgno]==0) then
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
alias cnt R10;
cnt=1;
breakpoint;
while(cnt<16) do 
if([PROCESS_TABLE+cnt*16+4]=="WAIT_MEM") then
[PROCESS_TABLE+cnt*16+4]="READY";
endif;
cnt=cnt+1;
endwhile;
breakpoint;
endif;
return;
endif;
if(funcnum==5) then 
alias cnt R6;
cnt=0;
alias no R7;
alias blk R2;
alias flag R8;
no=4;
while(cnt<16) do
while(no<8) do
if([DISK_MAP_TABLE+no]==blk&&[PTBR+cnt*20+no*2]!=-1) then
retn=[PTBR+cnt*20+no*2];
[MEMORY_FREE_LIST+[PTBR+cnt*20+no*2]]=[MEMORY_FREE_LIST+[PTBR+cnt*20+no*2]]+1;
return;
endif;
no=no+1;
endwhile;
cnt=cnt+1;
endwhile;
funcnum=1;
multipush(R1,R2,R7,R8);
call MOD_2;
multipop(R1,R2,R7,R8);
funcnum=2;
alias blk2 R4;
blk2=blk;
alias PID R2;
alias pg R3;
pg=retn;
PID=[SYSTEM_STATUS_TABLE+1];
multipush(R1,R2,R3,R4,R5,R6,R7,R8);
call MOD_4;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
retn=pg;
return;
endif;
if(funcnum==4) then 
breakpoint;
alias blk R2;
[DISK_FREE_LIST+blk]=[DISK_FREE_LIST+blk]-1;
breakpoint;
return;
endif;

