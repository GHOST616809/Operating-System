alias funcnum R1;
alias PID R2;
if(funcnum==3) then
multipush(R0,R1,R2,R3);
funcnum=8;
call MOD_0 ;
multipop(R0,R1,R2,R3);
alias wrd R3;
print wrd;
multipush(R0,R1,R2,R3);
funcnum=9;
call MOD_0;
alias retn R0;
alias val R5;
val=retn;
multipop(R0,R1,R2,R3);
return;
endif;
if(funcnum==4) then
multipush(R0,R1,R2,R3);
funcnum=8;
call MOD_0 ;
multipop(R0,R1,R2,R3);
alias wrd R3;
read;
[PROCESS_TABLE+PID*16+4]=WAIT_TERMINAL;
multipush(R0,R1,R2,R3);
call MOD_5;
multipop(R0,R1,R2,R3);
alias usp R10;
usp=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
[[PTBR+2*((wrd)/512)]*512+((wrd)%512)]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+8];
return;
endif;

if(funcnum==2) then 
alias pg R3;
alias blk R4;
funcnum=3;
multipush(R1,R2,R3,R4);
call MOD_0;
multipop(R1,R2,R3,R4);
[DISK_STATUS_TABLE]=1;
[DISK_STATUS_TABLE+1]=1;
[DISK_STATUS_TABLE+2]=pg;
[DISK_STATUS_TABLE+3]=blk;
[DISK_STATUS_TABLE+4]=PID;


load(pg,blk);
[PROCESS_TABLE+PID*16+4]=WAIT_DISK;
multipush(R1,R2,R3,R4);
call MOD_5;
multipop(R1,R2,R3,R4);
return;
endif;


if(funcnum==1) then
alias pgno R3;
alias blk R4;
funcnum=3;
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

[DISK_STATUS_TABLE+1]=0;
[DISK_STATUS_TABLE+2]=pgno;
[DISK_STATUS_TABLE+3]=blk;

[DISK_STATUS_TABLE+4]=PID;


store(pgno,blk);
[PROCESS_TABLE+PID*16+4]=WAIT_DISK;
multipush(R1,R2,R3,R4);
call MOD_5;
multipop(R1,R2,R3,R4);
return;
endif;

