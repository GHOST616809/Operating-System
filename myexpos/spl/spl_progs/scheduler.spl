breakpoint;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+12]=SP%512;
multipush (BP);
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] =(SP%512);
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
alias newPID R2;
newPID=-1;

alias cnt R12;
cnt=currentPID+1;
while(cnt<16) do 

if([PROCESS_TABLE+cnt*16+4]=="READY"||[PROCESS_TABLE+cnt*16+4]=="CREATED") then
newPID=cnt;
break;
endif;
cnt=cnt+1;
endwhile;
if(newPID==-1) then
cnt=1;
while(cnt<currentPID) do

if([PROCESS_TABLE+cnt*16+4]=="READY"||[PROCESS_TABLE+cnt*16+4]=="CREATED") then
newPID=cnt;
break;
endif;
cnt=cnt+1;
endwhile;
endif;
if(newPID==-1) then 
newPID=0;
endif;

[SYSTEM_STATUS_TABLE+1]=newPID;
if([PROCESS_TABLE+newPID*16+4]=="CREATED") then
PTBR=[PROCESS_TABLE+newPID*16 + 14];
if(newPID==2) then
print "child executed";
endif;
[PROCESS_TABLE+newPID*16 +4]="RUNNING";
SP=[PROCESS_TABLE+newPID*16+11]*512+[PROCESS_TABLE+newPID*16+12];
multipop(BP);
SP=[PROCESS_TABLE+newPID*16+13];
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;


ireturn;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];



[PROCESS_TABLE+newPID*16 +4]="RUNNING";
SP=[PROCESS_TABLE+newPID*16+11]*512+[PROCESS_TABLE+newPID*16 +12];
multipop(BP) ;
return;
